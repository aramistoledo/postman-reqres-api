{
	"info": {
		"_postman_id": "a52a658f-40de-421f-bc25-b9af3e0b9529",
		"name": "exemplo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24586981"
	},
	"item": [
		{
			"name": "reqres API",
			"item": [
				{
					"name": "Lista de Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"page deve ser 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.be.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"per_page deve ser 6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.per_page).to.be.equal(6);\r",
									"});\r",
									"\r",
									"pm.test(\"total deve ser 12\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.total).to.be.equal(12);\r",
									"});\r",
									"\r",
									"pm.test(\"total_pages deve ser 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.total_pages).to.be.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta deve ser válida e ter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"})\r",
									"\r",
									"pm.test(\"Content-Type esta presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users?page=2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Um Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Primeiro nome deve ser Janet\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.first_name).to.be.equal(\"Janet\");\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta deve ser válida e ter um corpo\", function () {\r",
									"     pm.response.to.be.ok;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"})\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Usuario não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/23",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "Lista de Recursos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"page deve ser 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.be.equal(1);\r",
									"});\r",
									"\r",
									"pm.test(\"per_page deve ser 6\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.per_page).to.be.equal(6);\r",
									"});\r",
									"\r",
									"pm.test(\"total deve ser 12\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.total).to.be.equal(12);\r",
									"});\r",
									"\r",
									"pm.test(\"total_pages deve ser 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.total_pages).to.be.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type está presente\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/unknown",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"response": []
				},
				{
					"name": "Um unico recurso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome deve ser fuchsia rose\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.name).to.be.equal(\"fuchsia rose\");\r",
									"});\r",
									"\r",
									"pm.test(\"Ano é 2001\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.year).to.be.equal(2001);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/unknown/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"unknown",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "recurso unico não encontrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"A resposta deve ser não encontrado\", function () {\r",
									"     pm.response.to.be.notFound;\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/unknown/23",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"unknown",
								"23"
							]
						}
					},
					"response": []
				},
				{
					"name": "Criar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome deve ser morpheus\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.equal(\"morpheus\");\r",
									"});\r",
									"\r",
									"pm.test(\"job deve ser leader\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job).to.be.equal(\"leader\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome deve ser morpheus\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.equal(\"morpheus\");\r",
									"});\r",
									"\r",
									"pm.test(\"job alterado para zion resident\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job).to.be.equal(\"zion resident\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Nome deve ser morpheus\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.be.equal(\"morpheus\");\r",
									"});\r",
									"\r",
									"pm.test(\"job alterado para zion resident\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.job).to.be.equal(\"zion resident\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registar com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Falha ao registrar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sucesso login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Erro login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Resposta com delay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code  200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Tempo de resposta entre 1000ms e 5000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.above(1000);\r",
									"     pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users?delay=3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "delay",
									"value": "3"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in",
			"type": "string"
		}
	]
}